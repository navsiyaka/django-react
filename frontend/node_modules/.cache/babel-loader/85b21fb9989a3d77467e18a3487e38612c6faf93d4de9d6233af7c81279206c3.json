{"ast":null,"code":"/**\r\n * Returns the object type of the given payload\r\n *\r\n * @param {*} payload\r\n * @returns {string}\r\n */\nfunction getType(payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1);\n}\n/**\r\n * Returns whether the payload is undefined\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\nfunction isUndefined(payload) {\n  return getType(payload) === 'Undefined';\n}\n/**\r\n * Returns whether the payload is null\r\n *\r\n * @param {*} payload\r\n * @returns {payload is null}\r\n */\nfunction isNull(payload) {\n  return getType(payload) === 'Null';\n}\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\nfunction isPlainObject(payload) {\n  if (getType(payload) !== 'Object') return false;\n  return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\n}\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\nfunction isObject(payload) {\n  return isPlainObject(payload);\n}\n/**\r\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\nfunction isAnyObject(payload) {\n  return getType(payload) === 'Object';\n}\n/**\r\n * Returns whether the payload is an object like a type passed in < >\r\n *\r\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\r\n *\r\n * @template T this must be passed in < >\r\n * @param {*} payload\r\n * @returns {payload is T}\r\n */\nfunction isObjectLike(payload) {\n  return isAnyObject(payload);\n}\n/**\r\n * Returns whether the payload is a function\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Function}\r\n */\nfunction isFunction(payload) {\n  return getType(payload) === 'Function';\n}\n/**\r\n * Returns whether the payload is an array\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\nfunction isArray(payload) {\n  return getType(payload) === 'Array';\n}\n/**\r\n * Returns whether the payload is a string\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\nfunction isString(payload) {\n  return getType(payload) === 'String';\n}\n/**\r\n * Returns whether the payload is a string, BUT returns false for ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\nfunction isFullString(payload) {\n  return isString(payload) && payload !== '';\n}\n/**\r\n * Returns whether the payload is ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\nfunction isEmptyString(payload) {\n  return payload === '';\n}\n/**\r\n * Returns whether the payload is a number\r\n *\r\n * This will return false for NaN\r\n *\r\n * @param {*} payload\r\n * @returns {payload is number}\r\n */\nfunction isNumber(payload) {\n  return getType(payload) === 'Number' && !isNaN(payload);\n}\n/**\r\n * Returns whether the payload is a boolean\r\n *\r\n * @param {*} payload\r\n * @returns {payload is boolean}\r\n */\nfunction isBoolean(payload) {\n  return getType(payload) === 'Boolean';\n}\n/**\r\n * Returns whether the payload is a regular expression\r\n *\r\n * @param {*} payload\r\n * @returns {payload is RegExp}\r\n */\nfunction isRegExp(payload) {\n  return getType(payload) === 'RegExp';\n}\n/**\r\n * Returns whether the payload is a date, and that the date is Valid\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Date}\r\n */\nfunction isDate(payload) {\n  return getType(payload) === 'Date' && !isNaN(payload);\n}\n/**\r\n * Returns whether the payload is a Symbol\r\n *\r\n * @param {*} payload\r\n * @returns {payload is symbol}\r\n */\nfunction isSymbol(payload) {\n  return getType(payload) === 'Symbol';\n}\n/**\r\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is boolean | null | undefined | number | string | symbol)}\r\n */\nfunction isPrimitive(payload) {\n  return isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);\n}\n/**\r\n * Does a generic check to check that the given payload is of a given type.\r\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\r\n * It will, however, differentiate between object and null\r\n *\r\n * @template T\r\n * @param {*} payload\r\n * @param {T} type\r\n * @throws {TypeError} Will throw type error if type is an invalid type\r\n * @returns {payload is T}\r\n */\nfunction isType(payload, type) {\n  if (!(type instanceof Function)) {\n    throw new TypeError('Type must be a function');\n  }\n  if (!type.hasOwnProperty('prototype')) {\n    throw new TypeError('Type is not a class');\n  }\n  // Classes usually have names (as functions usually have names)\n  var name = type.name;\n  return getType(payload) === name || Boolean(payload && payload.constructor === type);\n}\nexport { getType, isUndefined, isNull, isPlainObject, isObject, isAnyObject, isObjectLike, isFunction, isArray, isString, isFullString, isEmptyString, isNumber, isBoolean, isRegExp, isDate, isSymbol, isPrimitive, isType };","map":{"version":3,"names":["getType","payload","Object","prototype","toString","call","slice","isUndefined","isNull","isPlainObject","constructor","getPrototypeOf","isObject","isAnyObject","isObjectLike","isFunction","isArray","isString","isFullString","isEmptyString","isNumber","isNaN","isBoolean","isRegExp","isDate","isSymbol","isPrimitive","isType","type","Function","TypeError","hasOwnProperty","name","Boolean"],"sources":["/app/frontend/node_modules/is-what/dist/index.esm.js"],"sourcesContent":["/**\r\n * Returns the object type of the given payload\r\n *\r\n * @param {*} payload\r\n * @returns {string}\r\n */\r\nfunction getType(payload) {\r\n    return Object.prototype.toString.call(payload).slice(8, -1);\r\n}\r\n/**\r\n * Returns whether the payload is undefined\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\r\nfunction isUndefined(payload) {\r\n    return getType(payload) === 'Undefined';\r\n}\r\n/**\r\n * Returns whether the payload is null\r\n *\r\n * @param {*} payload\r\n * @returns {payload is null}\r\n */\r\nfunction isNull(payload) {\r\n    return getType(payload) === 'Null';\r\n}\r\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\r\nfunction isPlainObject(payload) {\r\n    if (getType(payload) !== 'Object')\r\n        return false;\r\n    return (payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype);\r\n}\r\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\r\nfunction isObject(payload) {\r\n    return isPlainObject(payload);\r\n}\r\n/**\r\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\r\nfunction isAnyObject(payload) {\r\n    return getType(payload) === 'Object';\r\n}\r\n/**\r\n * Returns whether the payload is an object like a type passed in < >\r\n *\r\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\r\n *\r\n * @template T this must be passed in < >\r\n * @param {*} payload\r\n * @returns {payload is T}\r\n */\r\nfunction isObjectLike(payload) {\r\n    return isAnyObject(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a function\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Function}\r\n */\r\nfunction isFunction(payload) {\r\n    return getType(payload) === 'Function';\r\n}\r\n/**\r\n * Returns whether the payload is an array\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\r\nfunction isArray(payload) {\r\n    return getType(payload) === 'Array';\r\n}\r\n/**\r\n * Returns whether the payload is a string\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isString(payload) {\r\n    return getType(payload) === 'String';\r\n}\r\n/**\r\n * Returns whether the payload is a string, BUT returns false for ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isFullString(payload) {\r\n    return isString(payload) && payload !== '';\r\n}\r\n/**\r\n * Returns whether the payload is ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isEmptyString(payload) {\r\n    return payload === '';\r\n}\r\n/**\r\n * Returns whether the payload is a number\r\n *\r\n * This will return false for NaN\r\n *\r\n * @param {*} payload\r\n * @returns {payload is number}\r\n */\r\nfunction isNumber(payload) {\r\n    return (getType(payload) === 'Number' && !isNaN(payload));\r\n}\r\n/**\r\n * Returns whether the payload is a boolean\r\n *\r\n * @param {*} payload\r\n * @returns {payload is boolean}\r\n */\r\nfunction isBoolean(payload) {\r\n    return getType(payload) === 'Boolean';\r\n}\r\n/**\r\n * Returns whether the payload is a regular expression\r\n *\r\n * @param {*} payload\r\n * @returns {payload is RegExp}\r\n */\r\nfunction isRegExp(payload) {\r\n    return getType(payload) === 'RegExp';\r\n}\r\n/**\r\n * Returns whether the payload is a date, and that the date is Valid\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Date}\r\n */\r\nfunction isDate(payload) {\r\n    return (getType(payload) === 'Date' && !isNaN(payload));\r\n}\r\n/**\r\n * Returns whether the payload is a Symbol\r\n *\r\n * @param {*} payload\r\n * @returns {payload is symbol}\r\n */\r\nfunction isSymbol(payload) {\r\n    return (getType(payload) === 'Symbol');\r\n}\r\n/**\r\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is boolean | null | undefined | number | string | symbol)}\r\n */\r\nfunction isPrimitive(payload) {\r\n    return (isBoolean(payload) ||\r\n        isNull(payload) ||\r\n        isUndefined(payload) ||\r\n        isNumber(payload) ||\r\n        isString(payload) ||\r\n        isSymbol(payload));\r\n}\r\n/**\r\n * Does a generic check to check that the given payload is of a given type.\r\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\r\n * It will, however, differentiate between object and null\r\n *\r\n * @template T\r\n * @param {*} payload\r\n * @param {T} type\r\n * @throws {TypeError} Will throw type error if type is an invalid type\r\n * @returns {payload is T}\r\n */\r\nfunction isType(payload, type) {\r\n    if (!(type instanceof Function)) {\r\n        throw new TypeError('Type must be a function');\r\n    }\r\n    if (!type.hasOwnProperty('prototype')) {\r\n        throw new TypeError('Type is not a class');\r\n    }\r\n    // Classes usually have names (as functions usually have names)\r\n    var name = type.name;\r\n    return (getType(payload) === name) || Boolean(payload && (payload.constructor === type));\r\n}\n\nexport { getType, isUndefined, isNull, isPlainObject, isObject, isAnyObject, isObjectLike, isFunction, isArray, isString, isFullString, isEmptyString, isNumber, isBoolean, isRegExp, isDate, isSymbol, isPrimitive, isType };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}