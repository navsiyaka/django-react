{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lolofet\\\\Downloads\\\\django-react-chart-example-master\\\\django-react-chart-example-master\\\\frontend\\\\src\\\\containers\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useDayStats } from \"../hooks/useDayStats\";\nimport AutoComplete from './AutoComplete';\nimport Chart from './Chart';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport DateRangePicker from 'react-daterange-picker';\nimport 'react-daterange-picker/dist/css/react-calendar.css';\nimport styled from 'styled-components';\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nconst moment = extendMoment(Moment);\nconst MainContainer = styled(Grid).attrs({\n  container: true\n})`\n  padding: 20px;\n  flex-direction: column;\n  align-items: stretch;\n  \n  @media (min-width: 600px) {\n    flex-direction: column;\n  }\n`;\n_c = MainContainer;\nconst ChartContainer = styled(Grid).attrs({\n  item: true\n})`\n  min-width: 49%;\n  text-align: center;\n`;\n_c2 = ChartContainer;\nconst BlockContainer = styled(Paper)`\n  padding: 20px;\n  margin: 10px;\n`;\n_c3 = BlockContainer;\nfunction onlyUniqueIds(value, index, self) {\n  return self.map(item => item.id).indexOf(value.id) === index;\n}\nexport default function Main() {\n  _s();\n  const dayStats = useDayStats();\n  const [dateRange, setDateRange] = useState(moment.range(moment(\"2019-06-24\"), moment(\"2019-06-30\")));\n  const [filterChoices, setFilterChoices] = useState({\n    datasources: [],\n    campaigns: []\n  });\n  const [filterSelected, setFilterSelected] = useState({\n    datasources: [],\n    campaigns: []\n  });\n  const [chartsData, setChartsData] = useState({\n    clicks: [],\n    impressions: [],\n    keys: []\n  });\n\n  // Calculate visible campaigns\n  const getChartKeys = () => {\n    let chartKeys = [];\n    (dayStats.data || []).forEach(item => {\n      const datasourcesIds = filterSelected.datasources.map(v => v.id);\n      const campaignsIds = filterSelected.campaigns.map(v => v.id);\n      const isSelectedDatasource = datasourcesIds.indexOf(item.datasource.id) !== -1;\n      const isSelectedCampaign = campaignsIds.indexOf(item.campaign.id) !== -1;\n\n      // Skip not selected datasources and campaigns\n      if (!isSelectedDatasource && !isSelectedCampaign) {\n        return;\n      }\n      chartKeys.push(item.campaign.name);\n    });\n    chartKeys = chartKeys.filter((value, index, self) => self.indexOf(value) === index);\n    return chartKeys;\n  };\n  const updateFilterChoices = () => {\n    if (dayStats.data) {\n      const datasources = dayStats.data.map(item => item.datasource).filter(onlyUniqueIds);\n      const campaigns = dayStats.data.map(item => item.campaign).filter(onlyUniqueIds);\n      const datasourcesIds = datasources.map(v => v.id);\n      const campaignsIds = campaigns.map(v => v.id);\n      setFilterChoices({\n        datasources,\n        campaigns\n      });\n      setFilterSelected({\n        datasources: filterSelected.datasources.filter(v => datasourcesIds.indexOf(v.id) !== -1),\n        campaigns: filterSelected.campaigns.filter(v => campaignsIds.indexOf(v.id) !== -1)\n      });\n    } else {\n      setFilterChoices({\n        datasources: [],\n        campaigns: []\n      });\n    }\n  };\n  const updateChartData = () => {\n    const newChartData = {\n      clicks: [],\n      impressions: [],\n      keys: []\n    };\n    if (!dayStats.data) {\n      setChartsData(newChartData);\n      return;\n    }\n    const chartKeys = getChartKeys();\n    newChartData.keys = chartKeys;\n    let curDate = dateRange.start.clone();\n    while (true) {\n      if (curDate.isAfter(dateRange.end)) {\n        break;\n      }\n      const dayItemClicks = {\n        name: curDate.format('YYYY/MM/DD')\n      };\n      const dayItemImpressions = {\n        name: curDate.format('YYYY/MM/DD')\n      };\n      const dayItems = dayStats.data.filter(item => moment(item.date).isSame(curDate));\n      chartKeys.forEach(key => {\n        const matchingItems = dayItems.filter(i => i.campaign.name === key);\n        if (matchingItems.length === 1) {\n          dayItemClicks[key] = matchingItems[0].clicks;\n          dayItemImpressions[key] = matchingItems[0].impressions;\n        } else {\n          dayItemClicks[key] = 0;\n          dayItemImpressions[key] = 0;\n        }\n      });\n      newChartData.clicks.push(dayItemClicks);\n      newChartData.impressions.push(dayItemImpressions);\n      curDate = curDate.add(1, 'day');\n    }\n    setChartsData(newChartData);\n  };\n  useEffect(updateFilterChoices, [dayStats.data]);\n  useEffect(updateChartData, [filterSelected, dayStats.data]);\n  useEffect(() => dayStats.load(dateRange), [dateRange]);\n  return /*#__PURE__*/React.createElement(MainContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(BlockContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 21\n    }\n  }, \"Filters\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 4,\n    lg: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    label: \"Datasources\",\n    isLoading: dayStats.isInProgress,\n    source: filterChoices.datasources,\n    values: filterSelected.datasources,\n    onChange: v => setFilterSelected({\n      datasources: v,\n      campaigns: filterSelected.campaigns\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(AutoComplete, {\n    label: \"Campaigns\",\n    isLoading: dayStats.isInProgress,\n    source: filterChoices.campaigns,\n    values: filterSelected.campaigns,\n    onChange: v => setFilterSelected({\n      campaigns: v,\n      datasources: filterSelected.datasources\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DateRangePicker, {\n    firstOfWeek: 1,\n    numberOfCalendars: 1,\n    selectionType: \"range\",\n    minimumDate: new Date(2000, 1, 1),\n    showLegend: true,\n    value: dateRange,\n    onSelect: v => setDateRange(v),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 29\n    }\n  }))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(BlockContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ChartContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 29\n    }\n  }, \"Clicks\"), /*#__PURE__*/React.createElement(Chart, {\n    syncId: \"sync-id\",\n    data: chartsData.clicks,\n    keys: chartsData.keys,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ChartContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 29\n    }\n  }, \"Impressions\"), /*#__PURE__*/React.createElement(Chart, {\n    syncId: \"sync-id\",\n    data: chartsData.impressions,\n    keys: chartsData.keys,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 29\n    }\n  }))))));\n}\n_s(Main, \"yvqJEMIF9zDCj2T8HUtFJ5LweZU=\", false, function () {\n  return [useDayStats];\n});\n_c4 = Main;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MainContainer\");\n$RefreshReg$(_c2, \"ChartContainer\");\n$RefreshReg$(_c3, \"BlockContainer\");\n$RefreshReg$(_c4, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","useDayStats","AutoComplete","Chart","Grid","Paper","Typography","DateRangePicker","styled","Moment","extendMoment","moment","MainContainer","attrs","container","_c","ChartContainer","item","_c2","BlockContainer","_c3","onlyUniqueIds","value","index","self","map","id","indexOf","Main","_s","dayStats","dateRange","setDateRange","range","filterChoices","setFilterChoices","datasources","campaigns","filterSelected","setFilterSelected","chartsData","setChartsData","clicks","impressions","keys","getChartKeys","chartKeys","data","forEach","datasourcesIds","v","campaignsIds","isSelectedDatasource","datasource","isSelectedCampaign","campaign","push","name","filter","updateFilterChoices","updateChartData","newChartData","curDate","start","clone","isAfter","end","dayItemClicks","format","dayItemImpressions","dayItems","date","isSame","key","matchingItems","i","length","add","load","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","xs","variant","direction","spacing","md","lg","label","isLoading","isInProgress","source","values","onChange","firstOfWeek","numberOfCalendars","selectionType","minimumDate","Date","showLegend","onSelect","syncId","_c4","$RefreshReg$"],"sources":["C:/Users/Lolofet/Downloads/django-react-chart-example-master/django-react-chart-example-master/frontend/src/containers/Main.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {useDayStats} from \"../hooks/useDayStats\";\nimport AutoComplete from './AutoComplete';\nimport Chart from './Chart';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport DateRangePicker from 'react-daterange-picker';\nimport 'react-daterange-picker/dist/css/react-calendar.css';\nimport styled from 'styled-components';\nimport Moment from 'moment';\nimport {extendMoment} from 'moment-range'\n\nconst moment = extendMoment(Moment);\n\n\nconst MainContainer = styled(Grid).attrs({\n    container: true\n})`\n  padding: 20px;\n  flex-direction: column;\n  align-items: stretch;\n  \n  @media (min-width: 600px) {\n    flex-direction: column;\n  }\n`;\n\nconst ChartContainer = styled(Grid).attrs({\n    item: true\n})`\n  min-width: 49%;\n  text-align: center;\n`;\n\n\nconst BlockContainer = styled(Paper)`\n  padding: 20px;\n  margin: 10px;\n`;\n\nfunction onlyUniqueIds(value, index, self) {\n    return self.map(item => item.id).indexOf(value.id) === index;\n}\n\nexport default function Main() {\n    const dayStats = useDayStats();\n\n    const [dateRange, setDateRange] = useState(\n        moment.range(\n            moment(\"2019-06-24\"),\n            moment(\"2019-06-30\"),\n        )\n    );\n    const [filterChoices, setFilterChoices] = useState({\n        datasources: [],\n        campaigns: []\n    });\n    const [filterSelected, setFilterSelected] = useState({\n        datasources: [],\n        campaigns: []\n    });\n\n    const [chartsData, setChartsData] = useState({\n        clicks: [],\n        impressions: [],\n        keys: []\n    });\n\n    // Calculate visible campaigns\n    const getChartKeys = () => {\n        let chartKeys = [];\n        (dayStats.data || []).forEach(item => {\n            const datasourcesIds = filterSelected.datasources.map(v => v.id);\n            const campaignsIds = filterSelected.campaigns.map(v => v.id);\n\n            const isSelectedDatasource = datasourcesIds.indexOf(item.datasource.id) !== -1;\n            const isSelectedCampaign = campaignsIds.indexOf(item.campaign.id) !== -1;\n\n            // Skip not selected datasources and campaigns\n            if (!isSelectedDatasource && !isSelectedCampaign) {\n                return\n            }\n\n            chartKeys.push(item.campaign.name);\n        });\n        chartKeys = chartKeys.filter((value, index, self) => self.indexOf(value) === index);\n        return chartKeys\n    };\n\n    const updateFilterChoices = () => {\n        if (dayStats.data) {\n            const datasources = dayStats.data.map(item => item.datasource).filter(onlyUniqueIds);\n            const campaigns = dayStats.data.map(item => item.campaign).filter(onlyUniqueIds);\n\n            const datasourcesIds = datasources.map(v => v.id);\n            const campaignsIds = campaigns.map(v => v.id);\n\n            setFilterChoices({\n                datasources,\n                campaigns\n            });\n            setFilterSelected({\n                datasources: filterSelected.datasources.filter(v => datasourcesIds.indexOf(v.id) !== -1),\n                campaigns: filterSelected.campaigns.filter(v => campaignsIds.indexOf(v.id) !== -1)\n            })\n        } else {\n            setFilterChoices({\n                datasources: [],\n                campaigns: [],\n            })\n        }\n    };\n\n    const updateChartData = () => {\n        const newChartData = {\n            clicks: [],\n            impressions: [],\n            keys: []\n        };\n\n        if (!dayStats.data) {\n            setChartsData(newChartData);\n            return\n        }\n\n        const chartKeys = getChartKeys();\n        newChartData.keys = chartKeys;\n\n        let curDate = dateRange.start.clone();\n        while (true) {\n            if (curDate.isAfter(dateRange.end)) {\n                break;\n            }\n\n            const dayItemClicks = {\n                name: curDate.format('YYYY/MM/DD')\n            };\n            const dayItemImpressions = {\n                name: curDate.format('YYYY/MM/DD')\n            };\n\n            const dayItems = dayStats.data\n                .filter(item => moment(item.date).isSame(curDate));\n\n            chartKeys.forEach(key => {\n                const matchingItems = dayItems.filter(i => i.campaign.name === key);\n\n                if (matchingItems.length === 1) {\n                    dayItemClicks[key] = matchingItems[0].clicks;\n                    dayItemImpressions[key] = matchingItems[0].impressions;\n                } else {\n                    dayItemClicks[key] = 0;\n                    dayItemImpressions[key] = 0;\n                }\n            });\n\n            newChartData.clicks.push(dayItemClicks);\n            newChartData.impressions.push(dayItemImpressions);\n\n            curDate = curDate.add(1, 'day');\n        }\n\n        setChartsData(newChartData);\n    };\n\n\n    useEffect(updateFilterChoices,\n        [dayStats.data]\n    );\n\n    useEffect(updateChartData,\n        [filterSelected, dayStats.data]\n    );\n\n    useEffect(\n        () => dayStats.load(dateRange),\n        [dateRange]\n    );\n\n    return (\n        <MainContainer>\n\n            <Grid item xs={12}>\n                <BlockContainer>\n\n                    <Typography variant={\"h4\"}>\n                        Filters\n                    </Typography>\n\n                    <Grid container direction='row' spacing={10}>\n                        <Grid item xs={12} md={4} lg={4}>\n                            <AutoComplete label=\"Datasources\"\n                                          isLoading={dayStats.isInProgress}\n                                          source={filterChoices.datasources}\n                                          values={filterSelected.datasources}\n                                          onChange={v => setFilterSelected({\n                                              datasources: v,\n                                              campaigns: filterSelected.campaigns\n                                          })}\n                            />\n                            <AutoComplete label=\"Campaigns\"\n                                          isLoading={dayStats.isInProgress}\n                                          source={filterChoices.campaigns}\n                                          values={filterSelected.campaigns}\n                                          onChange={v => setFilterSelected({\n                                              campaigns: v,\n                                              datasources: filterSelected.datasources\n                                          })}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} md={4}>\n                            <DateRangePicker\n                                firstOfWeek={1}\n                                numberOfCalendars={1}\n                                selectionType='range'\n                                minimumDate={new Date(2000, 1, 1)}\n                                showLegend={true}\n                                value={dateRange}\n                                onSelect={v => setDateRange(v)}\n                            />\n                        </Grid>\n                    </Grid>\n\n                </BlockContainer>\n            </Grid>\n\n            <Grid item>\n                <BlockContainer>\n                    <Grid container direction='row'>\n\n                        <ChartContainer>\n                            <Typography variant='h5'>\n                                Clicks\n                            </Typography>\n                            <Chart syncId='sync-id'\n                                   data={chartsData.clicks}\n                                   keys={chartsData.keys}\n                            />\n                        </ChartContainer>\n\n                        <ChartContainer>\n                            <Typography variant='h5'>\n                                Impressions\n                            </Typography>\n                            <Chart syncId='sync-id'\n                                   data={chartsData.impressions}\n                                   keys={chartsData.keys}\n                            />\n                        </ChartContainer>\n\n                    </Grid>\n                </BlockContainer>\n            </Grid>\n\n        </MainContainer>\n\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}