{"ast":null,"code":"import { isArray, isPlainObject, isSymbol } from 'is-what';\nfunction assignProp(carry, key, newVal, originalObject) {\n  var propType = originalObject.propertyIsEnumerable(key) ? 'enumerable' : 'nonenumerable';\n  if (propType === 'enumerable') carry[key] = newVal;\n  if (propType === 'nonenumerable') {\n    Object.defineProperty(carry, key, {\n      value: newVal,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nfunction mergeRecursively(origin, newComer, extensions) {\n  // work directly on newComer if its not an object\n  if (!isPlainObject(newComer)) {\n    // extend merge rules\n    if (extensions && isArray(extensions)) {\n      extensions.forEach(function (extend) {\n        newComer = extend(origin, newComer);\n      });\n    }\n    return newComer;\n  }\n  // define newObject to merge all values upon\n  var newObject = {};\n  if (isPlainObject(origin)) {\n    var props_1 = Object.getOwnPropertyNames(origin);\n    var symbols_1 = Object.getOwnPropertySymbols(origin);\n    newObject = props_1.concat(symbols_1).reduce(function (carry, key) {\n      // @ts-ignore\n      var targetVal = origin[key];\n      if (!isSymbol(key) && !Object.getOwnPropertyNames(newComer).includes(key) || isSymbol(key) && !Object.getOwnPropertySymbols(newComer).includes(key)) {\n        assignProp(carry, key, targetVal, origin);\n      }\n      return carry;\n    }, {});\n  }\n  var props = Object.getOwnPropertyNames(newComer);\n  var symbols = Object.getOwnPropertySymbols(newComer);\n  var result = props.concat(symbols).reduce(function (carry, key) {\n    // re-define the origin and newComer as targetVal and newVal\n    var newVal = newComer[key];\n    var targetVal = isPlainObject(origin)\n    // @ts-ignore\n    ? origin[key] : undefined;\n    // extend merge rules\n    if (extensions && isArray(extensions)) {\n      extensions.forEach(function (extend) {\n        newVal = extend(targetVal, newVal);\n      });\n    }\n    // When newVal is an object do the merge recursively\n    if (targetVal !== undefined && isPlainObject(newVal)) {\n      newVal = mergeRecursively(targetVal, newVal, extensions);\n    }\n    assignProp(carry, key, newVal, newComer);\n    return carry;\n  }, newObject);\n  return result;\n}\n/**\r\n * Merge anything recursively.\r\n * Objects get merged, special objects (classes etc.) are re-assigned \"as is\".\r\n * Basic types overwrite objects or other basic types.\r\n *\r\n * @param {(IConfig | any)} origin\r\n * @param {...any[]} newComers\r\n * @returns the result\r\n */\nfunction merge(origin) {\n  var newComers = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    newComers[_i - 1] = arguments[_i];\n  }\n  var extensions = null;\n  var base = origin;\n  if (isPlainObject(origin) && origin.extensions && Object.keys(origin).length === 1) {\n    base = {};\n    extensions = origin.extensions;\n  }\n  return newComers.reduce(function (result, newComer) {\n    return mergeRecursively(result, newComer, extensions);\n  }, base);\n}\nfunction concatArrays(originVal, newVal) {\n  if (isArray(originVal) && isArray(newVal)) {\n    // concat logic\n    return originVal.concat(newVal);\n  }\n  return newVal; // always return newVal as fallback!!\n}\nexport default merge;\nexport { merge, concatArrays };","map":{"version":3,"names":["isArray","isPlainObject","isSymbol","assignProp","carry","key","newVal","originalObject","propType","propertyIsEnumerable","Object","defineProperty","value","enumerable","writable","configurable","mergeRecursively","origin","newComer","extensions","forEach","extend","newObject","props_1","getOwnPropertyNames","symbols_1","getOwnPropertySymbols","concat","reduce","targetVal","includes","props","symbols","result","undefined","merge","newComers","_i","arguments","length","base","keys","concatArrays","originVal"],"sources":["/app/frontend/node_modules/merge-anything/dist/index.esm.js"],"sourcesContent":["import { isArray, isPlainObject, isSymbol } from 'is-what';\n\nfunction assignProp(carry, key, newVal, originalObject) {\r\n    var propType = originalObject.propertyIsEnumerable(key)\r\n        ? 'enumerable'\r\n        : 'nonenumerable';\r\n    if (propType === 'enumerable')\r\n        carry[key] = newVal;\r\n    if (propType === 'nonenumerable') {\r\n        Object.defineProperty(carry, key, {\r\n            value: newVal,\r\n            enumerable: false,\r\n            writable: true,\r\n            configurable: true\r\n        });\r\n    }\r\n}\r\nfunction mergeRecursively(origin, newComer, extensions) {\r\n    // work directly on newComer if its not an object\r\n    if (!isPlainObject(newComer)) {\r\n        // extend merge rules\r\n        if (extensions && isArray(extensions)) {\r\n            extensions.forEach(function (extend) {\r\n                newComer = extend(origin, newComer);\r\n            });\r\n        }\r\n        return newComer;\r\n    }\r\n    // define newObject to merge all values upon\r\n    var newObject = {};\r\n    if (isPlainObject(origin)) {\r\n        var props_1 = Object.getOwnPropertyNames(origin);\r\n        var symbols_1 = Object.getOwnPropertySymbols(origin);\r\n        newObject = props_1.concat(symbols_1).reduce(function (carry, key) {\r\n            // @ts-ignore\r\n            var targetVal = origin[key];\r\n            if ((!isSymbol(key) && !Object.getOwnPropertyNames(newComer).includes(key)) ||\r\n                (isSymbol(key) && !Object.getOwnPropertySymbols(newComer).includes(key))) {\r\n                assignProp(carry, key, targetVal, origin);\r\n            }\r\n            return carry;\r\n        }, {});\r\n    }\r\n    var props = Object.getOwnPropertyNames(newComer);\r\n    var symbols = Object.getOwnPropertySymbols(newComer);\r\n    var result = props.concat(symbols).reduce(function (carry, key) {\r\n        // re-define the origin and newComer as targetVal and newVal\r\n        var newVal = newComer[key];\r\n        var targetVal = (isPlainObject(origin))\r\n            // @ts-ignore\r\n            ? origin[key]\r\n            : undefined;\r\n        // extend merge rules\r\n        if (extensions && isArray(extensions)) {\r\n            extensions.forEach(function (extend) {\r\n                newVal = extend(targetVal, newVal);\r\n            });\r\n        }\r\n        // When newVal is an object do the merge recursively\r\n        if (targetVal !== undefined && isPlainObject(newVal)) {\r\n            newVal = mergeRecursively(targetVal, newVal, extensions);\r\n        }\r\n        assignProp(carry, key, newVal, newComer);\r\n        return carry;\r\n    }, newObject);\r\n    return result;\r\n}\r\n/**\r\n * Merge anything recursively.\r\n * Objects get merged, special objects (classes etc.) are re-assigned \"as is\".\r\n * Basic types overwrite objects or other basic types.\r\n *\r\n * @param {(IConfig | any)} origin\r\n * @param {...any[]} newComers\r\n * @returns the result\r\n */\r\nfunction merge(origin) {\r\n    var newComers = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        newComers[_i - 1] = arguments[_i];\r\n    }\r\n    var extensions = null;\r\n    var base = origin;\r\n    if (isPlainObject(origin) && origin.extensions && Object.keys(origin).length === 1) {\r\n        base = {};\r\n        extensions = origin.extensions;\r\n    }\r\n    return newComers.reduce(function (result, newComer) {\r\n        return mergeRecursively(result, newComer, extensions);\r\n    }, base);\r\n}\n\nfunction concatArrays(originVal, newVal) {\r\n    if (isArray(originVal) && isArray(newVal)) {\r\n        // concat logic\r\n        return originVal.concat(newVal);\r\n    }\r\n    return newVal; // always return newVal as fallback!!\r\n}\n\nexport default merge;\nexport { merge, concatArrays };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}